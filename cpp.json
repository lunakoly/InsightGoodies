{
	"name": "C++",

	"scopes": {
		"single_quote_scope": {
			"style_class": "single-quoted",

			"patterns": {
				"'": {
					"pop": true
				},

				"\\\\.": {
					"style_class": "keyword"
				}
			}
		},

		"double_quote_scope": {
			"style_class": "double-quoted",

			"patterns": {
				"\"": {
					"pop": true
				},

				"\\\\.": {
					"style_class": "keyword"
				}
			}
		},

		"single_line_comment_scope": {
			"style_class": "comment",

			"patterns": {
				"\n": {
					"pop": true
				}
			}
		},

		"multi_line_comment_scope": {
			"style_class": "comment",

			"patterns": {
				"\\*/": {
					"pop": true
				}
			}
		},

		"preprocessor-scope": {
			"patterns": {
				"\\S+": {
					"style_class": "preprocessor-parameter"
				},

				"\n": {
					"pop": true
				}
			}
		},

		"global": {
			"patterns": {
				"'": {
					"style_class": "single-quoted",
					"push": "single_quote_scope"
				},

				"\"": {
					"style_class": "double-quoted",
					"push": "double_quote_scope"
				},

				"//": {
					"style_class": "comment",
					"push": "single_line_comment_scope"
				},

				"/\\*": {
					"style_class": "comment",
					"push": "multi_line_comment_scope"
				},

				"#\\w+": {
					"style_class": "preprocessor-directive",
					"push": "preprocessor-scope"
				},

				"\\b(alignas|alignof|and|and_eq|asm|bitand|bitor|break|case|catch|class|compl|const|constexpr|continue|decltype|default|delete|do|else|enum|explicit|export|extern|for|friend|goto|if|inline|mutable|namespace|new|noexcept|not|not_eq|operator|or|or_eq|private|protected|public|register|return|signed|sizeof|static|static_assert|struct|switch|template|thread_local|throw|try|typedef|typeid|typename|union|unsigned|using|virtual|volatile|while|xor|xor_eq|override|final)\\b": {
					"style_class": "keyword"
				},

				"\\b(false|true|NULL|nullptr)\\b": {
					"style_class": "keyword-value"
				},

				"\\b(auto|bool|char|char16_t|char32_t|const_cast|dynamic_cast|float|int|long|reinterpret_cast|short|static_cast|this|void|wchar_t|size_t|ptrdiff_t)\\b": {
					"style_class": "primitive"
				},

				"\\b[a-zA-Z_][a-zA-Z0-9_]*\\s*(?=\\()": {
					"style_class": "function-call"
				},

				"[0-9]+\\.?[0-9]*(?:(?:e|E)[-+]?[0-9]+)?": {
					"style_class": "number"
				},

				"[0-9]*\\.?[0-9]+(?:(?:e|E)[-+]?[0-9]+)?": {
					"style_class": "number"
				}
			}
		}
	}
}